(defun print_prob (size)
  (interactive "NSize: ")
  (insert "Puzzle = [")
  (dotimes (i size i)
    (dotimes (j size j)
      (insert (format "S%d%d, " (+ i 1) (+ j 1))))
    (indent-according-to-mode)
    (insert "\n"))
  (delete-backward-char 3)
  (insert "],\n"))

(defun print_rows (size)
  (interactive "NSize: ")
  (dotimes (i size i)
    (insert (format "Row%d = [" (+ i 1)))
    (indent-according-to-mode)
    (dotimes (j size j)
      (insert (format "S%d%d, " (+ i 1) (+ j 1))))
    (delete-backward-char 2)
    (insert "],\n")))

(defun print_cols (size)
  (interactive "NSize: ")
  (dotimes (i size i)
    (insert (format "Col%d = [" (+ i 1)))
    (indent-according-to-mode)
    (dotimes (j size j)
      (insert (format "S%d%d, " (+ j 1) (+ i 1))))
    (delete-backward-char 2)
    (insert "],\n")))

(defun print_squares (size)
  (interactive "NSize: ")
  (let ((sqsz (round (sqrt size))))
    (dotimes (i size i)
      (insert (format "Square%d = [" (+ i 1)))
      (indent-according-to-mode)
      (let ((sr (* sqsz (/ i sqsz)))
            (sc (* sqsz (% i sqsz))))
        (dotimes (j size j)
          (insert (format "S%d%d, " (+ 1 sc (% j sqsz)) (+ 1 sr (/ j sqsz)))))
        (delete-backward-char 2)
        (insert "],\n")))))
